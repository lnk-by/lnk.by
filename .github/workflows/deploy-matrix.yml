name: Deploy or Remove Selected Lambdas

on:
  workflow_dispatch:
    inputs:
      entity:
        description: "Select entity to deploy"
        required: true
        type: choice
        options:
          - nothing
          - customer
          - campaign
          - organization
          - short_url
          - all

      action:
        description: "Select CRUD action to deploy"
        required: true
        type: choice
        options:
          - nothing
          - create
          - list
          - retrieve
          - update
          - delete
          - all

      deploy_redirect:
        description: "🔀 Manage redirect lambda?"
        required: false
        type: boolean
        default: false

      operation:
        description: "Select operation: Deploy or Remove"
        required: true
        type: choice
        options:
          - 🚀 Deploy
          - 🗑️ Remove

run-name: "${{ github.event.inputs.operation }} selected Lambdas: 🗂️${{ github.event.inputs.entity }},	🛠️:${{ github.event.inputs.action }}, 	🔀:${{ github.event.inputs.deploy_redirect }}"

jobs:
  deploy-matrix:
    runs-on: ubuntu-latest
    outputs:
      lambda_names: ${{ steps.set-targets.outputs.lambda_names }}
      cors_lambda_names: ${{ steps.set-targets.outputs.cors_lambda_names }}

    steps:
    - name: Determine targets
      id: set-targets
      run: |
        targets=""
        cors_targets=""

        echo "entity: ${{ inputs.entity }}, action: ${{ inputs.action }}"
        if [[ "${{ inputs.entity }}" != "nothing" && "${{ inputs.action }}" != "nothing" ]]; then
          if [[ "${{ inputs.entity }}" == "all" ]]; then
            for e in customer campaign organization short_url; do
              if [[ "${{ inputs.action }}" == "all" ]]; then
                for a in create list retrieve update delete; do
                  targets+="aws/${e}/${a} "
                done
              else
                targets+="aws/${e}/${{ inputs.action }} "
              fi
            done
          else
            if [[ "${{ inputs.action }}" == "all" ]]; then
              for a in create list retrieve update delete; do
                targets+="aws/${{ inputs.entity }}/${a} "
              done
            else
              targets+="aws/${{ inputs.entity }}/${{ inputs.action }} "
            fi
          fi
        fi
        cors_targets=$targets

        targets+="aws/cors "
        cors_targets=$targets
        if [[ "${{ inputs.deploy_redirect }}" == "true" ]]; then
          targets+="aws/redirect"
        fi

        echo "cors_targets=$cors_targets"
        echo "targets=$targets"
        if [[ "$targets" == "" ]]; then
          echo "❌ No targets specified"
          exit 1
        fi

        # Convert array to JSON array with jq, remove whitespace
        cors_json=`echo $cors_targets | sed 's/ $//' | sed 's/ /","/g' | sed 's/^/["/' | sed 's/$/"]/'`
        json=`echo $targets | sed 's/ $//' | sed 's/ /","/g' | sed 's/^/["/' | sed 's/$/"]/'`
        echo "cors_json=$cors_json"
        echo "json=$json"
        echo "cors_targets=$cors_targets"
        echo "targets=$targets"


        # Write clean output without leading spaces
        echo "cors_lambda_names=$cors_json" >> $GITHUB_OUTPUT
        echo "cors_targets=$cors_targets" >> $GITHUB_OUTPUT
        echo "lambda_names=$json" >> $GITHUB_OUTPUT
        echo "targets=$targets" >> $GITHUB_OUTPUT

    - name: Checkout repository
      uses: actions/checkout@v4
      if: ${{ endsWith(inputs.operation, 'Deploy') }}
    - name: Set up Go
      uses: actions/setup-go@v5
      if: ${{ endsWith(inputs.operation, 'Deploy') }}
      with:
        go-version: ${{ vars.GO_VERSION }}

    - name: Install dependencies
      run: go mod tidy
      if: ${{ endsWith(inputs.operation, 'Deploy') }}

    - name: Build All Lambdas
      if: ${{ endsWith(inputs.operation, 'Deploy') }}
      run: |
        targets="${{ steps.set-targets.outputs.targets }}"
        mkdir artifacts
        for lambda in $targets; do
          out_name=$(echo "$lambda" | sed 's|/|_|g')
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bootstrap "./${lambda}/main.go"
          zip -j "artifacts/${out_name}.zip" bootstrap
        done

    - name: Upload Artifacts
      if: ${{ endsWith(inputs.operation, 'Deploy') }}
      uses: actions/upload-artifact@v4
      with:
        name: lambdas
        path: artifacts/
        retention-days: 1

  call-deploy-lambda:
    needs: deploy-matrix
    strategy:
      matrix:
        lambda_name: ${{ fromJson(needs.deploy-matrix.outputs.lambda_names) }}
      max-parallel: 5
    uses: ./.github/workflows/deploy-one-lambda.yml
    with:
      lambda_name: ${{ matrix.lambda_name }}
      operation: ${{ inputs.operation }}
      do_build: "false"
      manage: "Lambda"
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DB_URL: ${{ secrets.DB_URL }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

  call-deploy-cors:
    needs:
      - deploy-matrix
      - call-deploy-lambda
    strategy:
      matrix:
        lambda_name: ${{ fromJson(needs.deploy-matrix.outputs.cors_lambda_names) }}
      max-parallel: 3
    uses: ./.github/workflows/deploy-one-lambda.yml
    with:
      lambda_name: ${{ matrix.lambda_name }}
      operation: ${{ inputs.operation }}
      do_build: "false"
      manage: "CORS"
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DB_URL: ${{ secrets.DB_URL }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}