name: Deploy or Remove Selected Lambdas

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment"
        required: true
        type: choice
        options:
          - "🛠 development"
          - "🧪 staging"
          - "🚀 production"
      entity:
        description: "🧩 Select entity to deploy"
        required: true
        type: choice
        options:
          - nothing
          - customer
          - campaign
          - organization
          - shorturl
          - landingpage
          - template
          - all

      action:
        description: "⚙️ Select CRUD action to deploy"
        required: true
        type: choice
        options:
          - nothing
          - create
          - list
          - retrieve
          - update
          - delete
          - all

      deploy_redirect:
        description: "🔀 Manage redirect lambda?"
        required: false
        type: boolean
        default: false

      deploy_user_customer:
        description: "🙍‍♀️ Manage user-to-customer lambda?"
        required: false
        type: boolean
        default: false
      deploy_stats:
        description: "📊 Manage stats lambda?"
        required: false
        type: boolean
        default: false

      deploy_web:
        description: "🌐 Manage web enabled static content"
        required: false
        type: boolean
        default: false

      operation:
        description: "Select operation"
        required: true
        type: choice
        options:
          - 🚀 Deploy
          - 🗑️ Remove

run-name: "${{ github.event.inputs.operation }}: 🗂️:${{ github.event.inputs.entity }},	🛠️:${{ github.event.inputs.action }}, 	🔀:${{ github.event.inputs.deploy_redirect }}, 🙍‍♀️:${{ github.event.inputs.deploy_user_customer }}, 📊:${{ github.event.inputs.deploy_stats }},🌐:${{ github.event.inputs.deploy_web }}"

jobs:
  prepare-env:
    runs-on: ubuntu-latest
    outputs:
      clean_env: ${{ steps.strip_env.outputs.clean_env }}
    steps:
      - name: Strip emoji from environment input
        id: strip_env
        run: |
          raw="${{ github.event.inputs.environment }}"
          clean=$(echo "$raw" | cut -d' ' -f2 | tr '[:lower:]' '[:upper:]')
          echo "clean_env=$clean" >> $GITHUB_OUTPUT
  deploy-matrix:
    needs: prepare-env
    runs-on: ubuntu-latest
    environment: ${{ needs.prepare-env.outputs.clean_env }}
    outputs:
      lambda_names: ${{ steps.set-targets.outputs.lambda_names }}
      cors_lambda_names: ${{ steps.set-targets.outputs.cors_lambda_names }}

    steps:
    - name: Determine targets
      id: set-targets
      run: |
        targets=""
        cors_targets=""

        echo "entity: ${{ inputs.entity }}, action: ${{ inputs.action }}"
        if [[ "${{ inputs.entity }}" != "nothing" && "${{ inputs.action }}" != "nothing" ]]; then
          if [[ "${{ inputs.entity }}" == "all" ]]; then
            for e in customer campaign organization shorturl landingpage template; do
              if [[ "${{ inputs.action }}" == "all" ]]; then
                if [[ "${e}" == "template" ]]; then
                  actions="list retrieve"
                else
                  actions="create list retrieve update delete"
                fi
                for a in $actions; do
                  targets+="aws/${e}/${a} "
                done
              else
                targets+="aws/${e}/${{ inputs.action }} "
              fi
            done
          else
            if [[ "${{ inputs.action }}" == "all" ]]; then
              if [[ "${{ inputs.entity }}" == "template" ]]; then
                actions="list retrieve"
              else
                actions="create list retrieve update delete"
              fi
              for a in $actions; do
                targets+="aws/${{ inputs.entity }}/${a} "
              done
            else
              targets+="aws/${{ inputs.entity }}/${{ inputs.action }} "
            fi
          fi
        fi
        cors_targets=$targets

        if [[ "$targets" != "" ]]; then
          targets+="aws/cors "
          cors_targets=$targets
        fi
        if [[ "${{ inputs.deploy_redirect }}" == "true" ]]; then
          targets+="aws/redirect "
        fi
        if [[ "${{ inputs.deploy_user_customer }}" == "true" ]]; then
          targets+="aws/user/created "
        fi
        if [[ "${{ inputs.deploy_stats }}" == "true" ]]; then
          targets+="aws/stats/record "
        fi

        echo "cors_targets=$cors_targets"
        echo "targets=$targets"
        deploy_web="${{ github.event.inputs.deploy_web }}"
        if [[ -z "$targets" && "$deploy_web" != "true" ]]; then
          echo "❌ Neither lambdas nor web content is specified"
          exit 1
        fi
        # Convert array to JSON array with jq, remove whitespace
        if [ -z "$cors_targets" ]; then
          cors_json='[]'
        else
          cors_json=`echo $cors_targets | sed 's/ $//' | sed 's/ /","/g' | sed 's/^/["/' | sed 's/$/"]/'`
        fi
        if [ -z "$targets" ]; then
          json='[]'
        else
          json=`echo $targets | sed 's/ $//' | sed 's/ /","/g' | sed 's/^/["/' | sed 's/$/"]/'`
        fi

        echo "cors_json=$cors_json"
        echo "json=$json"
        echo "cors_targets=$cors_targets"
        echo "targets=$targets"

        # Write clean output without leading spaces
        echo "cors_lambda_names=$cors_json" >> $GITHUB_OUTPUT
        echo "cors_targets=$cors_targets" >> $GITHUB_OUTPUT
        echo "lambda_names=$json" >> $GITHUB_OUTPUT
        echo "targets=$targets" >> $GITHUB_OUTPUT

    - name: Checkout repository
      uses: actions/checkout@v4
      if: ${{ endsWith(inputs.operation, 'Deploy') }}
    - name: Set up Go
      uses: actions/setup-go@v5
      if: ${{ endsWith(inputs.operation, 'Deploy') }}
      with:
        go-version: ${{ vars.GO_VERSION }}

    - name: Install dependencies
      run: go mod tidy
      if: ${{ endsWith(inputs.operation, 'Deploy') }}

    - name: Cache GeoLite2 Tarball
      id: geoip-cache
      uses: actions/cache@v4
      if: ${{ endsWith(inputs.operation, 'Deploy') }}
      with:
        path: GeoLite2-Country.tar.gz
        key: geolite2-tgz-${{ runner.os }}-${{ hashFiles('GeoLite2-Country.tar.gz') }}

    - name: Download GeoLite2 if not cached
      if: ${{ endsWith(inputs.operation, 'Deploy') && steps.geoip-cache.outputs.cache-hit != 'true' }}
      env:
        MAXMIND_LICENSE_KEY: ${{ secrets.MAXMIND_LICENSE_KEY }}
      run: |
        echo "license_key=${MAXMIND_LICENSE_KEY}"
        curl -L -o GeoLite2-Country.tar.gz \
          "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=${MAXMIND_LICENSE_KEY}&suffix=tar.gz"

    - name: Extract GeoLite2
      if: ${{ endsWith(inputs.operation, 'Deploy') }}
      run: |
        mkdir -p mmdb
        tar --strip-components=1 -xzf GeoLite2-Country.tar.gz -C mmdb

    - name: Build All Lambdas
      if: ${{ endsWith(inputs.operation, 'Deploy') }}
      run: |
        targets="${{ steps.set-targets.outputs.targets }}"
        mkdir artifacts
        for lambda in $targets; do
          out_name=$(echo "$lambda" | sed 's|/|_|g')
          echo "compiling ./${lambda}/main.go" 
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bootstrap "./${lambda}/main.go"
          if [ "$out_name" = "aws_stats_record" ]; then
            zip -j "artifacts/${out_name}.zip" bootstrap mmdb/GeoLite2-Country.mmdb
          else
            zip -j "artifacts/${out_name}.zip" bootstrap
          fi
        done

    - name: Upload Artifacts
      if: ${{ endsWith(inputs.operation, 'Deploy') }}
      uses: actions/upload-artifact@v4
      with:
        name: lambdas
        path: artifacts/
        retention-days: 1

  call-deploy-lambda:
    needs: deploy-matrix
    if: needs.deploy-matrix.outputs.lambda_names != '[]'
    strategy:
      matrix:
        lambda_name: ${{ fromJson(needs.deploy-matrix.outputs.lambda_names) }}
      max-parallel: 5
    uses: ./.github/workflows/deploy-one-lambda.yml
    with:
      lambda_name: ${{ matrix.lambda_name }}
      operation: ${{ inputs.operation }}
      do_build: "false"
      manage: "Lambda"
      environment: ${{ needs.deploy-matrix.outputs.environment }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DB_URL: ${{ secrets.DB_URL }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      MAXMIND_LICENSE_KEY: ${{ secrets.MAXMIND_LICENSE_KEY }}
      S3_BUCKET: ${{ vars.S3_BUCKET }}

  call-deploy-cors:
    needs:
      - deploy-matrix
      - call-deploy-lambda
    if: needs.deploy-matrix.outputs.cors_lambda_names != '[]'
    strategy:
      matrix:
        lambda_name: ${{ fromJson(needs.deploy-matrix.outputs.cors_lambda_names) }}
      max-parallel: 3
    uses: ./.github/workflows/deploy-one-lambda.yml
    with:
      lambda_name: ${{ matrix.lambda_name }}
      operation: ${{ inputs.operation }}
      do_build: "false"
      manage: "CORS"
      environment: ${{ needs.deploy-matrix.outputs.environment }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DB_URL: ${{ secrets.DB_URL }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      MAXMIND_LICENSE_KEY: ${{ secrets.MAXMIND_LICENSE_KEY }}
      S3_BUCKET: ${{ vars.S3_BUCKET }}

  deploy-web:
    if: ${{ github.event.inputs.deploy_web == 'true' }}
    uses: ./.github/workflows/deploy-web.yml
    with:
      operation: ${{ inputs.operation }}
      environment: ${{ needs.deploy-matrix.outputs.environment }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
