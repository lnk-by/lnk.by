name: Deploy Selected Lambdas

on:
  workflow_dispatch:
    inputs:
      entity:
        description: "Select entity to deploy"
        required: true
        type: choice
        options:
          - customer
          - campaign
          - organization
          - short_url
      action:
        description: "Select CRUD action to deploy"
        required: true
        type: choice
        options:
          - create
          - list
          - retrieve
          - update
          - delete
      deploy_redirect:
        description: "Deploy redirect lambda?"
        required: false
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 'PRODUCTION'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ vars.GO_VERSION }}

      - name: Install dependencies
        run: go mod tidy

      - name: Determine Lambdas to Deploy
        id: pick
        run: |
          # Build underscore-formatted targets directly
          targets=()
          if [[ "${{ inputs.deploy_redirect }}" == "true" ]]; then
            targets+=("aws_redirect")
          fi
          e="${{ inputs.entity }}"
          a="${{ inputs.action }}"
          targets+=("aws_${e}_${a}")
          echo "targets=${targets[*]}" >> $GITHUB_OUTPUT

      - name: Build and Deploy Selected Lambdas
        run: |
          for target in ${{ steps.pick.outputs.targets }}; do
            echo "Building and deploying $target"
            GOOS=linux GOARCH=amd64 go build -o "$target" "./aws/${{ inputs.entity }}/${{ inputs.action }}"
            zip -j "$target.zip" "$target"
            aws lambda update-function-code --function-name "$target" --zip-file "fileb://$target.zip"
            aws lambda update-function-configuration \
              --function-name "$target" \
              --environment "Variables={DB_URL=${{ secrets.DB_URL }},USERNAME=${{ secrets.DB_USER }},PASSWORD=${{ secrets.DB_PASSWORD }}}"
          done

