name: Manage AWS Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'DEVELOPMENT'
        type: choice
        options:
          - DEVELOPMENT
          - STAGING
          - PRODUCTION
      region:
        description: 'AWS Region'
        required: true
        default: 'eu-north-1'
        type: choice
        options:
            - us-east-1
            - us-east-2
            - us-west-1
            - us-west-2
            - ca-central-1
            - eu-west-1
            - eu-west-2
            - eu-west-3
            - eu-central-1
            - eu-north-1
            - eu-south-1
            - ap-southeast-1
            - ap-southeast-2
            - ap-northeast-1
            - ap-northeast-2
            - ap-south-1
            - ap-east-1
            - ap-northeast-3
            - sa-east-1
            - af-south-1
            - me-south-1
            - me-central-1
            - il-central-1
            - cn-north-1
            - cn-northwest-1
      api_gateway:
        description: 'API Gateway name (leave empty if you do not want to manage it)'
        type: string
      user_pool:
        description: 'Manage Cognito User Pool (leave empty if you do not want to manage it)'
        type: string
      s3_bucket:
        description: 'S3 Bucket name (leave empty if you do not want to manage it)'
        type: string
      rds_data:
        description: 'RDS data (DBID, DB name, username, password), example: db-dev-1,postgres,postgres,mypassword'
        type: string
      manage_db:
        description: 'RDS instance'
        type: boolean
        default: false
      manage_schema:
        description: 'RDS Schema + Tables'
        type: boolean
        default: false
      operation:
        description: 'Deploy or Remove'
        required: true
        type: choice
        options:
          - üöÄ Deploy
          - üóëÔ∏è Remove

run-name: >-
  ${{ github.event.inputs.operation }}(${{ github.event.inputs.environment }}):
  ${{ github.event.inputs.api_gateway != '' && ' üì°' }}${{ github.event.inputs.api_gateway }}
  ${{ github.event.inputs.user_pool != '' && ' üë§' }}${{ github.event.inputs.user_pool }}
  ${{ github.event.inputs.s3_bucket != '' && ' ü™£' }}${{ github.event.inputs.s3_bucket }}
  ${{ github.event.inputs.manage_db == 'true' && format('üêò {0}', needs.manage.outputs.db_identifier) }}
  ${{ github.event.inputs.manage_schema == 'true' && ' üóÇÔ∏è' }}
jobs:
  manage:
    name: '${{ github.event.inputs.operation }} Infra'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    outputs:
      db_identifier: ${{ steps.parse_rds.outputs.DB_IDENTIFIER }}
    env:
      AWS_REGION: ${{ github.event.inputs.region }}
      BUCKET_NAME: ${{ github.event.inputs.s3_bucket }}
      USER_POOL_NAME: ${{ github.event.inputs.user_pool }}
      HTTP_API_NAME: ${{ github.event.inputs.api_gateway }}
      DB_SQL_CREATE: ./shared/db/create.sql
      DB_SQL_DROP: ./shared/db/drop.sql

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Parse RDS Data
        id: parse_rds
        if: ${{ inputs.rds_data != '' }}
        run: |
            DB_DATA=$(echo "${{ inputs.rds_data }}" | sed 's/^ *//g' | sed 's/ *$//g' | sed 's/ *, */,/g')
            IFS=',' read -r DB_IDENTIFIER DB_NAME DB_USER DB_PASSWORD <<< "$DB_DATA"
            echo "DB_IDENTIFIER=$DB_IDENTIFIER" >> "$GITHUB_ENV"
            echo "DB_NAME=$DB_NAME" >> "$GITHUB_ENV"
            echo "DB_USER=$DB_USER" >> "$GITHUB_ENV"
            echo "DB_PASSWORD=$DB_PASSWORD" >> "$GITHUB_ENV"
            echo "inputs.manage_schema=${{ inputs.manage_schema }}"

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.region }}

      # Remove

      # API Gateway
      - name: Delete API Gateway
        if: ${{ inputs.api_gateway != '' }}
        run: |
          id=$(aws apigatewayv2 get-apis --query "Items[?Name=='$HTTP_API_NAME'].ApiId" --output text)
          [[ -n "$id" ]] && aws apigatewayv2 delete-api --api-id "$id"

      # Cognito
      - name: Delete User pool
        if: ${{ inputs.user_pool != '' && contains(inputs.operation, 'Remove') }}
        run: |
          id=$(aws cognito-idp list-user-pools --max-results 50 --query "UserPools[?Name=='$USER_POOL_NAME'].Id" --output text)
          [[ -n "$id" ]] && aws cognito-idp delete-user-pool --user-pool-id "$id"

      # S3 Bucket
      - name: Remove S3 bucket
        if: ${{ inputs.s3_bucket != '' && contains(inputs.operation, 'Remove') }}
        run: |
          aws s3 rm "s3://$BUCKET_NAME" --recursive || true
          aws s3api delete-bucket --bucket "$BUCKET_NAME"

      # PostgreSQL schema
      - name: Drop DB Schema
        if: ${{ inputs.manage_schema == true && contains(inputs.operation, 'Remove') }}
        run: |
          endpoint=$(aws rds describe-db-instances \
            --db-instance-identifier "$DB_IDENTIFIER" \
            --query 'DBInstances[0].Endpoint.Address' \
            --output text)

          PGPASSWORD=$DB_PASSWORD psql -h "$endpoint" -U "$DB_USER" -d "$DB_NAME" -f "$DB_SQL_DROP"

      # RDS PostgreSQL
      - name: Drop RDS instance
        if: ${{ inputs.manage_db == true && contains(inputs.operation, 'Remove') }}
        run: |
          aws rds delete-db-instance --db-instance-identifier "$DB_IDENTIFIER" --skip-final-snapshot

      # Deploy

      # API Gateway
      - name: Create API Gateway
        if: ${{ inputs.api_gateway != '' }}
        run: |
            aws apigatewayv2 create-api --name "$HTTP_API_NAME" --protocol-type HTTP

      # Cognito
      - name: Create User pool
        if: ${{ inputs.user_pool != '' && contains(inputs.operation, 'Deploy') }}
        run: |
          USER_POOL_JSON=$(aws cognito-idp create-user-pool --pool-name "$USER_POOL_NAME")
          USER_POOL_ID=$(echo "$USER_POOL_JSON" | grep '"Id":' | cut -d '"' -f4)
          echo "Created User Pool with ID $USER_POOL_ID"

      # S3 Bucket
      - name: Create S3 bucket
        if: ${{ inputs.s3_bucket != '' && contains(inputs.operation, 'Deploy') }}
        run: |
          aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$AWS_REGION" --create-bucket-configuration LocationConstraint="$AWS_REGION"

      # RDS PostgreSQL
      - name: Deploy RDS instance
        if: ${{ inputs.manage_db == true && contains(inputs.operation, 'Deploy') }}
        run: |
            aws rds create-db-instance \
              --db-instance-identifier "$DB_IDENTIFIER" \
              --db-instance-class db.t3.micro \
              --engine postgres \
              --master-username "$DB_USER" \
              --master-user-password "$DB_PASSWORD" \
              --allocated-storage 20

            echo "Waiting for DB instance '$DB_IDENTIFIER' to become available..."
            aws rds wait db-instance-available --db-instance-identifier "$DB_IDENTIFIER"
            echo "DB is now available."

            endpoint=$(aws rds describe-db-instances \
                --db-instance-identifier "$DB_IDENTIFIER" \
                --query 'DBInstances[0].Endpoint.Address' \
                --output text)

            jdbc_url="jdbc:postgresql://$endpoint:5432/${DB_NAME}?sslmode=require"
            echo "DB with requested USER and PASSWORD is created and can be acccessed via JDBC URL $jdbc_url"

      # PostgreSQL schema
      - name: Deploy DB Schema
        if: ${{ inputs.manage_schema == true && contains(inputs.operation, 'Deploy') }}
        run: |
          endpoint=$(aws rds describe-db-instances \
            --db-instance-identifier "$DB_IDENTIFIER" \
            --query 'DBInstances[0].Endpoint.Address' \
            --output text)

          PGPASSWORD=$DB_PASSWORD psql -h "$endpoint" -U "$DB_USER" -d "$DB_NAME" -f "$DB_SQL_CREATE"
